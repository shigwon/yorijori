pipeline {
    agent {
        docker {
            image 'docker:28.3.3'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    tools {
        gradle 'gradle-9.0.0'
        jdk 'jdk-17'
    }

    environment {
        GITLAB_URL = "https://lab.ssafy.com/s13-webmobile3-sub1/S13P11C102"

        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_IMAGE = "parkheejun/linky-backend"
        IMAGE_TAG = "1.0.0"
    }

    stages {
        stage('릴리즈파일 체크아웃') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/feature/deploy']],
                    extensions: [[$class: 'SparseCheckoutPaths',
                                  sparseCheckoutPaths: [[path: "apps/backend"]]]],
                    userRemoteConfigs: [[
                        url: "${GITLAB_URL}",
                        credentialsId: 'gitlab-credentials'
                    ]]
                )
            }
        }

        stage('소스 빌드') {
            steps {
                script {
                    dir('apps/backend') {
                        sh "chmod +x ./gradlew"
                        sh "./gradlew clean build --no-daemon"
                    }
                }
            }
        }

        stage('Docker 이미지 빌드') {
            steps {
                script {
                    dir('apps/backend') {
                        sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} ."
                        sh "docker tag ${DOCKER_IMAGE}:${IMAGE_TAG} ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }

        stage('Docker Hub 로그인 및 푸시') {
            steps {
                script {
                    sh "echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin"

                    sh "docker push ${DOCKER_IMAGE}:${IMAGE_TAG}"
                    sh "docker push ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('쿠버네티스 배포') {
            steps {
                script {
                    dir('apps/backend') {
                        sh "kubectl apply -f ./k8s/app/namespace.yaml"
                        sh "kubectl apply -f ./k8s/app/configmap.yaml"
                        sh "kubectl apply -f ./k8s/app/secret.yaml"
                        sh "kubectl apply -f ./k8s/app/service.yaml"
                        sh "kubectl apply -f ./k8s/app/deployment.yaml"
                    }
                }
            }
        }
    }

    post {
        always {
            sh "docker rmi ${DOCKER_IMAGE}:${IMAGE_TAG} || true"
            sh "docker rmi ${DOCKER_IMAGE}:latest || true"
            sh "docker logout || true"
        }

        success {
            echo "배포가 성공적으로 완료되었습니다!"
        }

        failure {
            echo "배포 중 오류가 발생했습니다."
        }
    }
}