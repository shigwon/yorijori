pipeline {
    agent none

    environment {
        GITLAB_URL = "https://lab.ssafy.com/s13-webmobile3-sub1/S13P11C102.git"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_IMAGE = "parkheejun/linky-backend"
        IMAGE_TAG = "1.0.0"
    }

    stages {
        stage('릴리즈파일 체크아웃') {
            agent any
            steps {
                git branch: 'feature/deploy',
                    credentialsId: 'gitlab-credentials',
                    url: "${GITLAB_URL}"

                // 프로젝트 구조 확인
                sh 'echo "프로젝트 구조:"'
                sh 'find . -name "settings.gradle*" -o -name "build.gradle*" | head -10'

                stash includes: '**/*', name: 'source-code'
            }
        }

        stage('소스 빌드') {
            agent {
                docker {
                    image 'gradle:8-jdk17'
                }
            }
            steps {
                unstash 'source-code'

                script {
                    // apps/backend 디렉토리로 이동해서 빌드
                    dir('apps/backend') {
                        sh "chmod +x ./gradlew"
                        sh "./gradlew clean build --no-daemon"
                    }
                }

                stash includes: 'apps/backend/build/**/*', name: 'build-artifacts'
            }
        }

        stage('Docker 이미지 빌드 및 배포') {
            agent {
                docker {
                    image 'docker:28.3.3'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                unstash 'source-code'
                unstash 'build-artifacts'

                sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} ."
                sh "docker tag ${DOCKER_IMAGE}:${IMAGE_TAG} ${DOCKER_IMAGE}:latest"

                sh "echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin"
                sh "docker push ${DOCKER_IMAGE}:${IMAGE_TAG}"
                sh "docker push ${DOCKER_IMAGE}:latest"
            }
        }

        stage('쿠버네티스 배포') {
            agent {
                docker {
                    image 'bitnami/kubectl:latest'
                }
            }
            steps {
                unstash 'source-code'
                sh "kubectl apply -f ./k8s/app/namespace.yaml"
                sh "kubectl apply -f ./k8s/app/configmap.yaml"
                sh "kubectl apply -f ./k8s/app/secret.yaml"
                sh "kubectl apply -f ./k8s/app/service.yaml"
                sh "kubectl apply -f ./k8s/app/deployment.yaml"
            }
        }
    }
}